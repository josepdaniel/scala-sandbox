import cats.Eval
import cats.implicits._
import scala.util.Random

// Eval - control when a computation takes place

// Now - computed eagerly then memoized
val now = Eval.now(Random.nextInt())
// now: Eval[Int] = Now(1915440924)
now.value
// res0: Int = 1915440924
now.value
// res1: Int = 1915440924

// Later - computed lazily then memoized
val later = Eval.later(Random.nextInt())
// later: Eval[Int] = cats.Later@7f032631
later.value
// res2: Int = 1348349705
later.value
// res3: Int = 1348349705

// Always - computed lazily, every time
val always = Eval.always(Random.nextInt())
// always: Eval[Int] = cats.Always@4d58df90
always.value
// res4: Int = 1860059346
always.value
// res5: Int = -797451398

// maps and flatmaps do not consume stack frames
def unsafeFactorialFactory(n: BigInt): () => BigInt = {
  var x: () => BigInt = () => 1

  for { i <- BigInt(1).to(n) } {
    x = x.map(_ * i)
  }
  x
}
// unsafeFactorialFactory(150000)() // stackoverflow

def safeFactorialFactory(n: BigInt): () => BigInt = {
  var x = Eval.now(BigInt(1))

  for { i <- BigInt(1).to(n) } {
    x = x.map(_ * i)
  }
  () => x.value
}
safeFactorialFactory(150000)()
// res6: BigInt = 318939764630734954408743138865564844005680470086708479946220574684914905306847708546868460285984692847253237675508166596275589252961245490908863862370462241992220798717781491307594883088939230214143481854651331965307104120709662276688839045145194813876104987802463286990833990138962078860161489106649235965118985552605686830059678917979476144037276386564949187051048999309260253436518433588305877948486804704424097446717428387761493287002366370336859735017543337509131143719153582552020446147575168735078279275185827819147354407291611129733595015960829449377966685984012390463466034945005546000019369254451334902878895263508740001389643280414985189673159236613474786591733071155405339284025703003267835526733076435947647273297476070871099067664639317279665417347322336357944996987896478161261182709254123517059604336022247584802051873090562969421488220283740788315512667241422367811511691837529198670590024944959118793353333409882102988542808575713723992592557952261083725768466408947099394789150448289223624892882899166597355552990057509630768215252945538560050165355521426882938962226105517021991977732087881593483518599701998587198529907949995526241105613137858340232009347657575521107108252402356700378940842512890050430516789317055815147656348208873758116685792053327862936202471643028916560159871120723796048777481822010275048340306934594257456147898172354406825661192800156741646507313468004077602588011662743102441041139087366534734298043974051045612477470667183163211892527758834803215391852879905920729230365141252561857315099515143575324759835313234316066747793075731332523473435427298853797166128379976329574318589258777583247681970083981952125513528532035693988612628696014384736451960314295513885443481801807833823816388370865012625578673816941533557100540176335794578859887341844031661285429589306264902677201691185447703307651136555821951056747117132661314340476848550077107941340460780411674571414834839246599403032658767478385413443877082240979900950539384072234732890795441852012838503419470875318386040285578930678140881898277158270622148279956241474132492833678194191143601814168024631225649947894010330762136955369749311653200323533166521587188785474490898616584639065679732917801121184600326001948037749988611413393428137146961758012753782585086716115035529791777567596041275534242849439733177941938309100199068070943953621458656764829415070617358334505051617597842698211293155586246607874391829992423846808942379526961271981710507707764959711499519476604935519437061866105656657234770872987187000154236600241528139270722893888430161666838445300567350840415024142194833483060490083054198963501542769093788728083446839799642106756179226263057516304823825736928032460577023284260698057411367775847457558832861746471708629356349139586753005478754864584571836623891744788210964777277943772387131817953153834199312720238707879221233339543685548694297358040311915999013033203808164507934974417506492719742339792250505734430921038208509144031604998400163430126805725890721250799764320033821233036867311440590766647601359114530480189820009133183059043626046166081940438200559929668702929344229842267295682723394739026145249738363841873002486005906654527284578451001913594001933689670777585429582011567417199899397478837134872352201507596855772263724701456205521020528075490880093076913806773101190095088564303261653994667823025874059985404257377242121079108697188385675133132857075805592255947638855432500334126640734913083959522256319379691154584422147108622058880132813573463182189067974292070335384400783811467744837813646900784198005905477805180217628291630815321392432935598094069785767769716574848433221720951974510114614126912657005976935214907718253022852762809436812473837166590090848398737851680466532334462872281860044698398439354928737380172794161092034503540672253829117400678511018939914903360919033182046585460061411434885284694125284863635941568788191388207767481835942008072417159751522234051352559607400275882466721944411514404313147534702995584274824251697950970995018399314918677964567075663069722951293793051461357883808928442619088675646554539728831878842605464554294224183782526812122647001564084825098514562344176349321058329937322787089653283313903050998763590428587677649594979529916718783618311482974349618303217148554064654579405832310257998094642795367583334514577981046287583321059742952139094515499639762259314801258344306219199138511969025776248337344418763854835499250974958360783288169604709381819738565604233466060942892482451971444971562745366394765750099368166735544761287982400458220117967864534486019894189514369454909988940585619755011591256275772755884051778110272713708035718452336157391494866485930195890227899246650442607502863652604448927701817761240551462190586549144140087738480571726223701579013228186950787268375841336310681694845327045521682818155973543897702828078193809377180264764930936312845929606763125564327834619621043404947896319887779969863583366478342425416989104226071787935976816118100480512357477433124653218424202600049444394720949754425421951888676599222173805307709633968317532431871755516432945219166607022811744974809790659277401994710096750217158601484344073597285419259576251176825875309314587534996412027126839544116676645273086255358115844484100232933266995869349893979700552528960830030671709737301878895817174313990842392810805262996523797795236274216637481246276410565278599380657632865450115378532454338452094964542285168476128687990313015306613998720453403861927962208007580033877843148041123202669047173801644278338132962565751976787326397135191637478531370408042706311415850735131103723294522164811986448807228338319264580911766074389146612414703802631266297202850425105056046239053732120214061727763962034190683886506657593212281613719289901486907538209204966378923864928587400604866760369328616163897766476006808279799387033061732095867456057086496943731029850739689451653603594589479...

// Defer - take an instance of `Eval` and defer its computation
val deferred = Eval.defer(Eval.now(println("computing")))
// deferred: Eval[Unit] = cats.Eval$$anon$5@5346ad89
deferred.value
// computing

// It's useful for stack-safe 'recursion'.
def unsafeFactorial(n: BigInt): BigInt = {
  if (n == 1) {
    n
  }
  n * unsafeFactorial(n - 1)
}
// unsafeFactorial(150000) // stackOverflowError

// Instead of allocating a stack frame for each call to `safeFactorial` it creates a big recursive structure
// with function pointers on the heap which can be iteratively traversed
def safeFactorial(n: BigInt): Eval[BigInt] = {
  if (n == 1) {
    Eval.now(1)
  } else {
    Eval.defer(safeFactorial(n - 1).map(_ * n))
  }
}
safeFactorial(150000).value
// res8: BigInt = 318939764630734954408743138865564844005680470086708479946220574684914905306847708546868460285984692847253237675508166596275589252961245490908863862370462241992220798717781491307594883088939230214143481854651331965307104120709662276688839045145194813876104987802463286990833990138962078860161489106649235965118985552605686830059678917979476144037276386564949187051048999309260253436518433588305877948486804704424097446717428387761493287002366370336859735017543337509131143719153582552020446147575168735078279275185827819147354407291611129733595015960829449377966685984012390463466034945005546000019369254451334902878895263508740001389643280414985189673159236613474786591733071155405339284025703003267835526733076435947647273297476070871099067664639317279665417347322336357944996987896478161261182709254123517059604336022247584802051873090562969421488220283740788315512667241422367811511691837529198670590024944959118793353333409882102988542808575713723992592557952261083725768466408947099394789150448289223624892882899166597355552990057509630768215252945538560050165355521426882938962226105517021991977732087881593483518599701998587198529907949995526241105613137858340232009347657575521107108252402356700378940842512890050430516789317055815147656348208873758116685792053327862936202471643028916560159871120723796048777481822010275048340306934594257456147898172354406825661192800156741646507313468004077602588011662743102441041139087366534734298043974051045612477470667183163211892527758834803215391852879905920729230365141252561857315099515143575324759835313234316066747793075731332523473435427298853797166128379976329574318589258777583247681970083981952125513528532035693988612628696014384736451960314295513885443481801807833823816388370865012625578673816941533557100540176335794578859887341844031661285429589306264902677201691185447703307651136555821951056747117132661314340476848550077107941340460780411674571414834839246599403032658767478385413443877082240979900950539384072234732890795441852012838503419470875318386040285578930678140881898277158270622148279956241474132492833678194191143601814168024631225649947894010330762136955369749311653200323533166521587188785474490898616584639065679732917801121184600326001948037749988611413393428137146961758012753782585086716115035529791777567596041275534242849439733177941938309100199068070943953621458656764829415070617358334505051617597842698211293155586246607874391829992423846808942379526961271981710507707764959711499519476604935519437061866105656657234770872987187000154236600241528139270722893888430161666838445300567350840415024142194833483060490083054198963501542769093788728083446839799642106756179226263057516304823825736928032460577023284260698057411367775847457558832861746471708629356349139586753005478754864584571836623891744788210964777277943772387131817953153834199312720238707879221233339543685548694297358040311915999013033203808164507934974417506492719742339792250505734430921038208509144031604998400163430126805725890721250799764320033821233036867311440590766647601359114530480189820009133183059043626046166081940438200559929668702929344229842267295682723394739026145249738363841873002486005906654527284578451001913594001933689670777585429582011567417199899397478837134872352201507596855772263724701456205521020528075490880093076913806773101190095088564303261653994667823025874059985404257377242121079108697188385675133132857075805592255947638855432500334126640734913083959522256319379691154584422147108622058880132813573463182189067974292070335384400783811467744837813646900784198005905477805180217628291630815321392432935598094069785767769716574848433221720951974510114614126912657005976935214907718253022852762809436812473837166590090848398737851680466532334462872281860044698398439354928737380172794161092034503540672253829117400678511018939914903360919033182046585460061411434885284694125284863635941568788191388207767481835942008072417159751522234051352559607400275882466721944411514404313147534702995584274824251697950970995018399314918677964567075663069722951293793051461357883808928442619088675646554539728831878842605464554294224183782526812122647001564084825098514562344176349321058329937322787089653283313903050998763590428587677649594979529916718783618311482974349618303217148554064654579405832310257998094642795367583334514577981046287583321059742952139094515499639762259314801258344306219199138511969025776248337344418763854835499250974958360783288169604709381819738565604233466060942892482451971444971562745366394765750099368166735544761287982400458220117967864534486019894189514369454909988940585619755011591256275772755884051778110272713708035718452336157391494866485930195890227899246650442607502863652604448927701817761240551462190586549144140087738480571726223701579013228186950787268375841336310681694845327045521682818155973543897702828078193809377180264764930936312845929606763125564327834619621043404947896319887779969863583366478342425416989104226071787935976816118100480512357477433124653218424202600049444394720949754425421951888676599222173805307709633968317532431871755516432945219166607022811744974809790659277401994710096750217158601484344073597285419259576251176825875309314587534996412027126839544116676645273086255358115844484100232933266995869349893979700552528960830030671709737301878895817174313990842392810805262996523797795236274216637481246276410565278599380657632865450115378532454338452094964542285168476128687990313015306613998720453403861927962208007580033877843148041123202669047173801644278338132962565751976787326397135191637478531370408042706311415850735131103723294522164811986448807228338319264580911766074389146612414703802631266297202850425105056046239053732120214061727763962034190683886506657593212281613719289901486907538209204966378923864928587400604866760369328616163897766476006808279799387033061732095867456057086496943731029850739689451653603594589479...

// Probably looks something like this

// class Defer[A](a: => Eval[A]) extends Eval {
//   val thunk = () => a
//   def value: A = {
//     var x = thunk()
//     while (x.isInstanceOf[Defer[A]]) {
//       x = x.thunk()
//     }
//     return x.value
//   }
// }
